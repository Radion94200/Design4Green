stages:
  - test
  - build
  - deploy
  - sonarqube-check

services:
  - docker:dind

test:
  stage: test
  image: python:3-alpine
  script:
    - pip install -r backend/requirements.txt
    - python backend/manage.py test

sonarqube-check:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  only:
    refs:
      - master
  stage: sonarqube-check
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=d4g
  allow_failure: true

build:
  image: docker:stable
  only:
    refs:
      - master
  stage: build
  script:
    - docker info
    - echo "registering with $REGISTRY_USERNAME $REGISTRY_PASSWORD"
    - echo $REGISTRY_PASSWORD | docker login -u $REGISTRY_USERNAME --password-stdin registry.gitlab.com
    - docker build -t $BACK_IMAGE_NAME ./backend
    - docker push $BACK_IMAGE_NAME
    - docker build -t $FRONT_IMAGE_NAME ./frontend
    - docker push $FRONT_IMAGE_NAME

deploy:
  image: alpine:latest
  only:
    - tags
  stage: deploy
  script:
    - apk add --update curl wget
    - wget https://git.dadard.fr/dadard/scripts/raw/branch/master/deploy.sh
    - export POD_NAME
    - export DEPLOYER_URL
    - export DEPLOYER_TOKEN
    - echo "== DEPLOYING BACKEND =="
    - export CONTAINER_NAME=$BACK_CONTAINER_NAME
    - export IMAGE_NAME=$BACK_IMAGE_NAME
    - echo "deploying container $CONTAINER_NAME ($IMAGE_NAME) with API $DEPLOYER_URL in pod $POD_NAME"
    - sh deploy.sh
    - echo "== DEPLOYING FRONTEND =="
    - export CONTAINER_NAME=$FRONT_CONTAINER_NAME
    - export IMAGE_NAME=$FRONT_IMAGE_NAME
    - echo "deploying container $CONTAINER_NAME ($IMAGE_NAME) with API $DEPLOYER_URL in pod $POD_NAME"
    - sh deploy.sh

